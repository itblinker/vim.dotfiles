if &compatible
  set nocompatible
endif

"{{{ plugins | configuration
let s:data = {
            \ 'dein'  : expand('$HOME/software/bin/dein.vim'),
            \ 'cache' : expand('$HOME/software/bin/dein.vim.cache')
            \}

set nosecure
execute 'set rtp+='.s:data.dein
call dein#begin(s:data.cache, [expand('<sfile>')])

    call dein#add('Shougo/dein.vim',    {'name' : 'dein'})
    call dein#add('Shougo/vimproc.vim', {'name' : 'vimproc', 'build' : 'make'})

    call dein#add('Shougo/unite.vim', {
                \ 'name' : 'unite',
                \
                \ 'on_event' : 'VimEnter',
                \ 'hook_post_source': 'call plugins#unite#PostSourceSetup()'
                \ })

    call dein#add('Shougo/unite-outline', {
                \ 'name' : 'uniteOutline',
                \
                \ 'depends' : ['unite'],
                \
                \ 'on_event' : 'VimEnter'
                \ })

    call dein#add('Shougo/tabpagebuffer.vim', {
                \ 'name' : 'tabpagebuffer',
                \
                \ 'depends' : ['unite'],
                \
                \ 'on_event' : 'VimEnter',
                \ 'hook_post_source': 'call plugins#tabpagebuffer#PostSourceSetup()'
                \ })

    call dein#add('MattesGroeger/vim-bookmarks', {
                \ 'name' : 'vimbookmarks',
                \
                \ 'depends' : ['unite'],
                \
                \ 'on_event' : 'VimEnter',
                \ 'hook_post_source': 'call plugins#vimbookmarks#PostSourceSetup()'
                \ })

    call dein#add('tacroe/unite-mark')

    call dein#add('Shougo/neomru.vim', {
                \ 'name' : 'neomru',
                \
                \ 'depends' : ['unite'],
                \
                \ 'on_event' : 'VimEnter',
                \ 'hook_post_source': 'call plugins#neomru#PostSourceSetup()'
                \ })

    call dein#add('Shougo/neoyank.vim', {
                \ 'name' : 'neoyank',
                \
                \ 'depends' : ['unite'],
                \
                \ 'on_event' : 'VimEnter',
                \ 'hook_post_source': 'call plugins#neoyank#PostSourceSetup()'
                \ })

    call dein#add('thinca/vim-unite-history', {
                \ 'name' : 'unitehistory',
                \
                \ 'depends' : ['unite'],
                \
                \ 'on_event' : 'VimEnter',
                \ 'hook_post_source': 'call plugins#unitehistory#PostSourceSetup()'
                \ })

    call dein#add('osyo-manga/unite-quickfix', {
                \ 'name' : 'unitequickfix',
                \
                \ 'depends' : ['unite'],
                \
                \ 'on_event' : 'VimEnter',
                \ 'hook_post_source': 'call plugins#unitequickix#PostSourceSetup()'
                \ })

    call dein#add('Shougo/unite-help', {
                \ 'name' : 'unite-help',
                \
                \ 'depends' : ['unite']
                \ })

    call dein#add('Shougo/vimfiler.vim', {
                \ 'name' : 'vimFiler',
                \
                \ 'depends' : ['unite'],
                \
                \ 'on_event' : 'VimEnter',
                \ 'hook_source': 'call plugins#vimFiler#PreSourceSetup()',
                \ 'hook_post_source': 'call plugins#vimFiler#PostSourceSetup()'
                \ })

    call dein#add('majkinetor/unite-cmdmatch', {
                \ 'name' : 'uniteCmdmatch',
                \
                \ 'depends' : ['unite'],
                \
                \ 'on_event' : 'VimEnter',
                \ 'hook_post_source': 'call plugins#uniteCmdmatch#PostSourceSetup()'
                \ })

    call dein#add('kmnk/vim-unite-svn', {
                \ 'name' : 'unitesvn',
                \
                \ 'if' : 'plugins#uniteSvn#isNeeded()',
                \
                \ 'depends' : ['unite']
                \ })

    call dein#add('kmnk/vim-unite-giti', {
                \ 'name' : 'unitegiti',
                \
                \ 'if' : 'plugins#uniteGiti#isNeeded()',
                \
                \ 'depends' : ['unite']
                \ })

    call dein#add('hewes/unite-gtags', {
                \ 'name' : 'unitegtags',
                \
                \ 'depends' : ['unite'],
                \
                \ 'on_ft' : ['cpp', 'c'],
                \ 'hook_post_source': 'call plugins#unitegtags#PostSourceSetup()'
                \ })

    call dein#add('scrooloose/nerdcommenter', {
                \ 'name' : 'nerdcommenter',
                \
                \ 'on_event' : 'VimEnter',
                \ 'hook_source': 'call plugins#nerdcomment#PreSourceSetup()',
                \ 'hook_post_source' : 'call plugins#nerdcomment#PostSourceSetup()'
                \ })

    call dein#add('easymotion/vim-easymotion', {
                \ 'name' : 'easymotion',
                \
                \ 'on_event' : 'VimEnter',
                \ 'hook_post_source' : 'call plugins#easymotion#PostSourceSetup()'
                \ })

    call dein#add('kshenoy/vim-signature', {
                \ 'name' : 'signaure'
                \ })

    call dein#add('yssl/QFEnter', {
                \ 'name' : 'qfenter',
                \
                \ 'on_event' : 'VimEnter',
                \ 'hook_post_source': 'call plugins#qfenter#PostSourceSetup()'
                \ })

    call dein#add('itblinker/highlighter.vim', {
                \ 'name' : 'highlighter'
                \ })

    call dein#add('vifm/vifm.vim', {
                \ 'name' : 'vifm',
                \
                \ 'on_event' : 'VimEnter',
                \ 'hook_post_source': 'call plugins#vifm#PostSourceSetup()'
                \ })

    call dein#add('rdnetto/YCM-Generator', {
                \ 'name' : 'YcmGenerator',
                \
                \ 'rev': 'stable',
                \ })

    call dein#add('Valloric/YouCompleteMe', {
                \ 'name' : 'YouCompleteMe',
                \
                \ 'frozen' : 1,
                \ 'frozen_info' : 'plugin is to heavy for install/update/build inside in vim',
                \ 'build': './install.py --clang-completer',
                \
                \ 'on_event' : 'VimEnter',
                \ 'on_if' : 'plugins#youCompleMe#isNeeded()',
                \ })

    call dein#add('kien/rainbow_parentheses.vim', {
                \ 'name' : 'rainbowParenthesis',
                \
                \ 'on_event' : 'VimEnter',
                \ 'hook_post_source': 'call plugins#rainbowParenthesis#PostSourceSetup()'
                \ })

    call dein#add('octol/vim-cpp-enhanced-highlight', {
                \ 'name' : 'cppenhancedhighlight_syntax',
                \
                \ 'on_ft' : 'cpp',
                \ 'hook_post_source': 'call plugins#cppenhancedhighlits#PostSourceSetup()'
                \ })

    call dein#add('aklt/plantuml-syntax', {
                \ 'name' : 'plantuml_syntax',
                \
                \ 'on_ft' : 'plantuml',
                \ })

    call dein#add('scrooloose/vim-slumlord', {
                \ 'name' : 'slumlord',
                \
                \ 'on_ft' : 'plantuml',
                \ })

    call dein#add('szw/vim-maximizer', {
                \ 'name' : 'maximizer',
                \
                \ 'on_event' : 'VimEnter',
                \ 'hook_source': 'call plugins#maximizer#PreSourceSetup()'
                \ })

    call dein#add('tmux-plugins/vim-tmux', {
                \ 'name' : 'tmux_syntax',
                \
                \ 'on_ft' : 'tmux',
                \ })

    call dein#add('tmux-plugins/vim-tmux-focus-events', {
                \ 'name' : 'tmuxFocusEvents',
                \
                \ 'if' : 'plugins#tmuxFocusEvents#isNeeded()'
                \ })

    call dein#add('christoomey/vim-tmux-navigator', {
                \ 'name' : 'tmuxNavigator',
                \
                \ 'if' : 'plugins#tmuxNavigator#isNeeded()'
                \ })

    call dein#add('vimwiki/vimwiki', {
                \ 'name' : 'vimwiki',
                \
                \ 'on_event' : 'VimEnter',
                \ 'hook_source' : 'call plugins#vimwiki#PreSourceSetup()',
                \ 'hook_post_source': 'call plugins#vimwiki#PostSourceSetup()'
                \ })

    call dein#add('google/vim-maktaba',
                \ {
                \ 'name' : 'maktaba',
                \ 'lazy' : 1,
                \
                \ 'hook_source': 'call plugins#maktaba#PreSourceSetup()'
                \ })

    call dein#add('vim-jp/vital.vim', {
                \ 'name' : 'vital',
                \
                \ 'lazy' : 1
                \ })

    call dein#add('vim-jp/vital-complete', {
                \ 'name' : 'vitalComplte',
                \
                \ 'on_ft' : 'vim'
                \ })

    call dein#add('tpope/vim-dispatch', {
                \ 'name' : 'dispatch',
                \ 'lazy' : 1
                \ })

    call dein#add('ntpeters/vim-better-whitespace')
    call dein#add('bronson/vim-trailing-whitespace')
    call dein#add('google/vim-searchindex')

    call dein#add('tpope/vim-eunuch')
    call dein#add('mhinz/vim-signify')
    call dein#add('cohama/lexima.vim')
    call dein#add('bling/vim-bufferline')
    call dein#add('mkitt/tabline.vim')
    call dein#add('rstacruz/vim-xtract')

    call dein#add('cohama/agit.vim', {
                \ 'name' : 'agit'
                \ })

    "{{{ plugins to configure

    "super
    "cohama/lexima.vim
    "cohama/agit.vim


    " checking syntax async (2) plugins to check
    "call dein#add('w0rp/ale',
                "\ {
                "\ 'name' : 'AsynchronousLintEngine',
                "\ })

    "call dein#add(' maralla/validator.vim ',
                "\ {
                "\ 'name' : 'Validator',
                "\ })

    "TODO: gundo alternative: mbbill/undotree
    "call dein#add('sjl/gundo.vim', {
                "\ 'name' : 'gundo',
                "\
                "\ 'on_event' : 'VimEnter',
                "\ 'hook_post_source': 'call plugins#gundo#PostSourceSetup()'
                "\ })

    "call dein#add('itblinker/fgrep.vim')
    "call dein#add('itblinker/ttcn.vim')
    "call dein#add('tblinker/cplane.sct')

    "call dein#add('Shougo/unite-session',
                "\ {
                "\ 'name' : 'unitesession',
                "\ 'on_event' : 'VimEnter',
                "\ 'depends' : ['unite'],
                "\ 'hook_post_source': 'call plugins#unitesession#PostSourceSetup()'
                "\ })

    "call dein#add('tsukkee/unite-tag',
                "\ {
                "\ 'name' : 'unitetag',
                "\ 'on_event' : 'VimEnter',
                "\ 'hook_post_source': 'call plugins#unitetag#PostSourceSetup()'
                "\ })


    "Plug 'Shougo/unite-build'
    "Plug 'Shougo/neoinclude.vim'
    "Plug 'kopischke/unite-spell-suggest'
    "Plug 'Shougo/junkfile.vim'
    "Plug 'Shougo/vimshell.vim'
    "Plug 'Shougo/neopairs.vim'



    "call dein#add('https://github.com/vim-utils/vim-man.git',
                "\ {
                "\ 'if' : 0
                "\ })

    "call dein#add('https://github.com/vim-utils/vim-husk.git',
                "\ {
                "\ 'if' : 0
                "\ })

    "Plug 'jceb/vim-editqf'     "rare usable - it's used to laod/save quickfix/location list
    "Plug 'sk1418/QFGrep'
    "Plug 'plasticboy/vim-markdown'
    "Plug 'tpope/vim-repeat'
    "Plug 'szw/vim-g'
    "Plug 'mtth/scratch.vim'
    "Plug 'fmoralesc/vim-pad'
    "Plug 'vim-scripts/Txtfmt-The-Vim-Highlighter'
    "Plug 'lfv89/vim-interestingwords'
    "Plug 'idbrii/AsyncCommand'
    "Plug 'mrtazz/simplenote.vim'
    "Plug 'embear/vim-localvimrc'
    "Plug 'majutsushi/tagbar'
    "Plug 'terryma/vim-multiple-cursors'
    "Plug 'bbchung/gtags.vim'
    "Plug 'tpope/vim-surround'

    "call dein#add('ton/vim-bufsurf',
                "\ {
                "\ 'name' : 'bufsurf',
                "\ 'on_event' : 'VimEnter',
                "\ 'hook_post_source': 'call plugins#bufsurf#PostSourceSetup()'
                "\ })

    "call dein#add('scrooloose/nerdtree',
                "\ {
                "\ 'name' : 'nerdtree',
                "\ 'on_event' : 'VimEnter',
                "\ 'hook_post_source' : 'call plugins#nerdtree#PostSourceSetup()'
                "\ })

    "call dein#add('vim-scripts/VimgrepBuffer')
   "
    "call dein#add('justinmk/gv.vim')
    "call dein#add('tpope/vim-fugitive')
    "call dein#add('google/vim-glaive')
    "call dein#add('guns/vim-sexp')
    "call dein#add('junegunn/vim-easy-align')

    "}}}

call dein#end()

"}}}
"{{{ settings | global

syntax enable
filetype plugin indent on

execute 'set wildignore='.vimrc#ignore#instance().wildignoreFormat()

set encoding=utf-8
set title

au CursorHold * checktime
au FocusLost * silent redraw!

" should open copen/lopen on bottom
abbreviate copen botright copen
abbreviate lopen botright lopen

set ttyfast
set clipboard^=unnamed,unnamedplus

set background=dark
if has('gui_running')
    colorscheme elflord
else
    colorscheme ron
endif

set hidden
set autoread
set autowrite
set nobackup
set nowb
set noswapfile

set linebreak
set relativenumber

set ttimeoutlen=10

set autoindent
set copyindent

set nostartofline
set nowrap
set backspace=indent,eol,start
set foldmethod=marker

set mouse=

set eol

set splitright
set splitbelow

set showcmd
set laststatus=2
set wildmenu
set wildmode=list:full

set visualbell
set noerrorbells

set showmatch
set incsearch
set hlsearch
set ignorecase
set smartcase

execute 'set viminfo+=n'.vimrc#cache#instance().fetch().'/.viminfo'
set history=2000
set undolevels=2000

"}}}
"{{{ mappings | global

let g:mapleader = ','

inoremap jk <esc>

noremap <silent> <left> :3wincmd ><cr>
noremap <silent> <right> :3wincmd <<cr>
noremap <silent> <up> :3wincmd +<cr>
noremap <silent> <down> :3wincmd -<cr>

nnoremap q <nop>
nnoremap Q :q<CR>

vnoremap < <gv
vnoremap > >gv

vnoremap p pgvy
vnoremap P Pgvy

nnoremap \| :vsplit<CR>
nnoremap _ :split<CR>

nnoremap / /\v
nnoremap ? ?\v

nnoremap td :tabclose<CR>

nnoremap <leader><space> :nohlsearch<CR>

set pastetoggle=<F2>

vnoremap <leader>G :call vimrc#grep#fixed#execute(vimrc#utils#string#getSelection())<CR>

"}}}
