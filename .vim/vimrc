if &compatible
  set nocompatible
endif

"{{{ plugins | configuration
"{{{ dein.vim | paths configuration

" adding folder for dein autoloads functions
" original folder pointed for instaler.sh
"execute 'set rtp+='.expand('${HOME}/DEV/git.softwares/dein.vim')
execute 'set rtp+='.expand('$HOME/DEV/git.softwares/dein.vim')

" path where downloaded plugins will be stored
call dein#begin(expand('$HOME/DEV/bin/dein.vim'), [expand('<sfile>')])
"{{{
    call dein#add('Shougo/dein.vim')
"}}}
"}}}

    call dein#add('Shougo/vimproc.vim',
                \ {
                \ 'name' : 'vimproc',
                \ 'build' : 'make',
                \ 'lazy' : 1
                \ })

    call dein#add('Shougo/unite.vim',
                \ {
                \ 'name' : 'unite',
                \ 'on_event' : 'VimEnter',
                \ 'hook_post_source': 'call vimrc#unite#PostSourceSetup()'
                \ })

    call dein#add('Shougo/tabpagebuffer.vim',
                \ {
                \ 'name' : 'tabpagebuffer',
                \ 'on_event' : 'VimEnter',
                \ 'depends' : ['unite'],
                \ 'hook_post_source': 'call vimrc#tabpagebuffer#PostSourceSetup()'
                \ })

    call dein#add('MattesGroeger/vim-bookmarks',
                \ {
                \ 'name' : 'vimbookmarks',
                \ 'on_event' : 'VimEnter',
                \ 'depends' : ['unite'],
                \ 'hook_post_source': 'call vimrc#vimbookmarks#PostSourceSetup()'
                \ })

    call dein#add('tacroe/unite-mark')

    call dein#add('Shougo/neomru.vim',
                \ {
                \ 'name' : 'neomru',
                \ 'on_event' : 'VimEnter',
                \ 'depends' : ['unite'],
                \ 'hook_post_source': 'call vimrc#neomru#PostSourceSetup()'
                \ })

    call dein#add('Shougo/neoyank.vim',
                \ {
                \ 'name' : 'neoyank',
                \ 'on_event' : 'VimEnter',
                \ 'depends' : ['unite'],
                \ 'hook_post_source': 'call vimrc#neoyank#PostSourceSetup()'
                \ })

    call dein#add('thinca/vim-unite-history',
                \ {
                \ 'name' : 'unitehistory',
                \ 'on_event' : 'VimEnter',
                \ 'depends' : ['unite'],
                \ 'hook_post_source': 'call vimrc#unitehistory#PostSourceSetup()'
                \ })

    call dein#add('osyo-manga/unite-quickfix',
                \ {
                \ 'name' : 'unitequickfix',
                \ 'on_event' : 'VimEnter',
                \ 'depends' : ['unite'],
                \ 'hook_post_source': 'call vimrc#unitequickix#PostSourceSetup()'
                \ })

    call dein#add('Shougo/unite-help',
                \ {
                \ 'name' : 'unite-help',
                \ 'depends' : ['unite']
                \ })

    call dein#add('Shougo/vimfiler.vim',
                    \ {
                    \ 'name' : 'vimFiler',
                    \ 'on_event' : 'VimEnter',
                    \ 'depends' : ['unite'],
                    \ 'hook_source': 'call vimrc#vimFiler#PreSourceSetup()',
                    \ 'hook_post_source': 'call vimrc#vimFiler#PostSourceSetup()'
                    \ })

    if vimrc#isSvnRepository()
        call dein#add('kmnk/vim-unite-svn',
                    \ {
                    \ 'name' : 'unitesvn',
                    \ 'on_event' : 'VimEnter',
                    \ 'depends' : ['unite']
                    \ })
    endif

    if vimrc#isGitRepository()
        call dein#add('kmnk/vim-unite-giti',
                    \ {
                    \ 'name' : 'unitegiti',
                    \ 'on_event' : 'VimEnter',
                    \ 'depends' : ['unite']
                    \ })
    endif

    if vimrc#isGtagsAvailable()
        call dein#add('hewes/unite-gtags',
                    \ {
                    \ 'name' : 'unitegtags',
                    \ 'on_ft' : ['cpp', 'c'],
                    \ 'hook_post_source': 'call vimrc#unitegtags#PostSourceSetup()'
                    \ })
    endif

    " configure further
    "call dein#add('Shougo/unite-session',
                "\ {
                "\ 'name' : 'unitesession',
                "\ 'on_event' : 'VimEnter',
                "\ 'depends' : ['unite'],
                "\ 'hook_post_source': 'call vimrc#unitesession#PostSourceSetup()'
                "\ })

    "call dein#add('tsukkee/unite-tag',
                "\ {
                "\ 'name' : 'unitetag',
                "\ 'on_event' : 'VimEnter',
                "\ 'hook_post_source': 'call vimrc#unitetag#PostSourceSetup()'
                "\ })

    "Plug 'Shougo/unite-outline'
    "Plug 'Shougo/unite-build'
    "Plug 'Shougo/neoinclude.vim'
    "Plug 'kopischke/unite-spell-suggest'
    "Plug 'Shougo/junkfile.vim'
    "Plug 'Shougo/vimshell.vim'
    "Plug 'Shougo/vimfiler.vim'
    "Plug 'Shougo/neopairs.vim'


    " --------------- non unite plugins


    call dein#add('scrooloose/nerdcommenter',
                \ {
                \ 'name' : 'nerdcommenter',
                \ 'on_event' : 'VimEnter',
                \ 'hook_source': 'call vimrc#nerdcomment#PreSourceSetup()',
                \ 'hook_post_source' : 'call vimrc#nerdcomment#PostSourceSetup()'
                \ })

    call dein#add('easymotion/vim-easymotion',
                \ {
                \ 'name' : 'easymotion',
                \ 'on_event' : 'VimEnter',
                \ 'hook_post_source' : 'call vimrc#easymotion#PostSourceSetup()'
                \ })

    call dein#add('sjl/gundo.vim',
                \ {
                \ 'name' : 'gundo',
                \ 'on_event' : 'VimEnter',
                \ 'hook_post_source': 'call vimrc#gundo#PostSourceSetup()'
                \ })



    call dein#add('kshenoy/vim-signature',
                \ {
                \ 'name' : 'signaure'
                \ })

    call dein#add('yssl/QFEnter',
                \ {
                \ 'name' : 'qfenter',
                \ 'on_event' : 'VimEnter',
                \ 'hook_post_source': 'call vimrc#qfenter#PostSourceSetup()'
                \ })

    call dein#add('itblinker/highlighter.vim',
                \ {
                \ 'name' : 'highlighter'
                \ })

    call dein#add('vifm/vifm.vim',
                \ {
                \ 'name' : 'vifm',
                \ 'on_event' : 'VimEnter',
                \ 'hook_post_source': 'call vimrc#vifm#PostSourceSetup()'
                \ })

    if vimrc#isCMakeListFileAvailable()
        call dein#add('rdnetto/YCM-Generator',
                    \ {
                    \ 'name' : 'ycmgenerator',
                    \ 'rev': 'stable',
                    \ 'on_event' : 'VimEnter',
                    \ })
    endif

    if vimrc#isYcmProjectConfigFileAvailable()
        call dein#add('Valloric/YouCompleteMe',
                    \ {
                    \ 'name' : 'youcompleteme',
                    \ 'timeout' : 180,
                    \ 'build': './install.py --clang-completer'
                    \ })
    endif

    call dein#add('kien/rainbow_parentheses.vim',
                \ {
                \ 'name' : 'rainbowParenthesis',
                \ 'hook_post_source': 'call vimrc#rainbowParenthesis#PostSourceSetup()'
                \ })

    "call dein#add('itblinker/fgrep.vim')
    "call dein#add('itblinker/ttcn.vim')
    "call dein#add('tblinker/cplane.sct')
    call dein#add('tmux-plugins/vim-tmux')
    call dein#add('tmux-plugins/vim-tmux-focus-events')
    call dein#add('christoomey/vim-tmux-navigator')

    call dein#add('ntpeters/vim-better-whitespace')
    call dein#add('bronson/vim-trailing-whitespace')

    call dein#add('google/vim-searchindex')
    "call dein#add('vim-scripts/VimgrepBuffer')
    call dein#add('tpope/vim-dispatch')
    call dein#add('tpope/vim-eunuch')
    call dein#add('mhinz/vim-signify')

    call dein#add('szw/vim-maximizer')

    call dein#add('cohama/lexima.vim')
    call dein#add('bling/vim-bufferline')
    call dein#add('mkitt/tabline.vim')
    "call dein#add('justinmk/gv.vim')
    "call dein#add('tpope/vim-fugitive')
    "call dein#add('google/vim-glaive')
    "call dein#add('guns/vim-sexp')
    "call dein#add('junegunn/vim-easy-align')



    "
    " filetypes
    "
    call dein#add('octol/vim-cpp-enhanced-highlight',
                \ {
                \ 'name' : 'cppenhancedhighlight',
                \ 'on_ft' : 'cpp',
                \ 'hook_post_source': 'call vimrc#cppenhancedhighlits#PostSourceSetup()'
                \ })

    call dein#add('aklt/plantuml-syntax',
                \ {
                \ 'name' : 'plantumlsyntax',
                \ })
    "
    " libraries
    "
    call dein#add('google/vim-maktaba',
                \ {
                \ 'name' : 'maktaba',
                \ 'lazy' : 1,
                \ 'hook_source': 'call vimrc#maktaba#PreSourceSetup()'
                \ })

    call dein#add('vim-jp/vital.vim',
                \ {
                \ 'name' : 'vital',
                \ 'lazy' : 1
                \ })

    "call dein#add('vimwiki/vimwiki',
                "\ {
                "\ 'if' : 0
                "\ })

    "call dein#add('https://github.com/vim-utils/vim-man.git',
                "\ {
                "\ 'if' : 0
                "\ })

    "call dein#add('https://github.com/vim-utils/vim-husk.git',
                "\ {
                "\ 'if' : 0
                "\ })

    "Plug 'jceb/vim-editqf'     "rare usable - it's used to laod/save quickfix/location list
    "Plug 'sk1418/QFGrep'
    "Plug 'plasticboy/vim-markdown'
    "Plug 'tpope/vim-repeat'
    "Plug 'szw/vim-g'
    "Plug 'mtth/scratch.vim'
    "Plug 'fmoralesc/vim-pad'
    "Plug 'vim-scripts/Txtfmt-The-Vim-Highlighter'
    "Plug 'lfv89/vim-interestingwords'
    "Plug 'idbrii/AsyncCommand'
    "Plug 'mrtazz/simplenote.vim'
    "Plug 'embear/vim-localvimrc'
    "Plug 'majutsushi/tagbar'
    "Plug 'terryma/vim-multiple-cursors'
    "Plug 'bbchung/gtags.vim'
    "Plug 'tpope/vim-surround'

    "call dein#add('ton/vim-bufsurf',
                "\ {
                "\ 'name' : 'bufsurf',
                "\ 'on_event' : 'VimEnter',
                "\ 'hook_post_source': 'call vimrc#bufsurf#PostSourceSetup()'
                "\ })

    "call dein#add('scrooloose/nerdtree',
                "\ {
                "\ 'name' : 'nerdtree',
                "\ 'on_event' : 'VimEnter',
                "\ 'hook_post_source' : 'call vimrc#nerdtree#PostSourceSetup()'
                "\ })
"}}}

"{{{ dein.vim | end statement
call dein#end()
"}}}

"{{{ settings | global

syntax enable
filetype plugin indent on

set wildignore=*/.git/*,*/.hg/*,*/.svn/*,*/.bzr/*,*.o,*.obj

set encoding=utf-8
set title

au CursorHold * checktime
au FocusLost * silent redraw!

" should open copen/lopen on bottom
abbreviate copen botright copen
abbreviate lopen botright lopen

set ttyfast
set clipboard^=unnamed,unnamedplus

set background=dark
if has('gui_running')
    colorscheme elflord
else
    colorscheme ron
endif

set hidden
set autoread
set autowrite
set nobackup
set nowb
set noswapfile

set linebreak
set relativenumber

set ttimeoutlen=10

set autoindent
set copyindent

set nostartofline
set nowrap
set backspace=indent,eol,start

set mouse=

set eol

set splitright
set splitbelow

set showcmd
set laststatus=2
set wildmenu
set wildmode=list:full

set visualbell
set noerrorbells

set showmatch
set incsearch
set hlsearch
set ignorecase
set smartcase

execute 'set viminfo+=n'.vimrc#getCacheDir().'/.viminfo'
set history=2000
set undolevels=2000

set foldmethod=marker

"}}}

"{{{ mappings | global

let g:mapleader = ','

inoremap jk <esc>

nnoremap q <nop>
nnoremap Q :bd!<CR>

vnoremap < <gv
vnoremap > >gv

vnoremap p pgvy
vnoremap P Pgvy

nnoremap \| :vsplit<CR>
nnoremap _ :split<CR>

nnoremap / /\v
nnoremap ? ?\v

nnoremap <leader><space> :nohlsearch<CR>

nnoremap <c-k> <c-w>k
nnoremap <c-l> <c-w>l
nnoremap <c-h> <c-w>h
nnoremap <c-x> <c-w>x

set pastetoggle=<F2>

vnoremap <leader>G :call vimrc#grep#fixed#execute(vimrc#getStringVisuallySelected())<CR>

"}}}
